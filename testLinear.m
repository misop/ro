function testLinear(database, selected_column, pocet_validacii, redukcia)
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Mon Apr 22 18:51:26 CEST 2013

[d_riadky, d_stlpce] = size(database);
% pre kazdu dimenziu mame cislo -> vysledna ROC krivka
ROCs = zeros((d_stlpce-1), 1);
for pocet_dimenzii = 1:(d_stlpce-1)
    result = zeros(pocet_validacii, 1);
    display(pocet_dimenzii);
    for validacia = 1:pocet_validacii
        display(validacia);
        
        %  ci sa ma pouzit kross validacia alebo nie
        if(pocet_validacii > 1)
            % rozdeli databazu na dany pocet casti
            indices = crossvalind('Kfold', database(:,selected_column), pocet_validacii);
            % priradi patricne indexy pre dane casti, pricom
            % pocet_casti - 1 = trenovacia mnozina
            % 1 - testovacia mnozina
            mI1 = indices ~= validacia;
            mI2 = indices == validacia;
            % priradi databazu pre dane indexy
            training = database(mI1, :);
            testing = database(mI2, :);
        else
            training = database;
            testing = database;            
        end;

        % vyselektne ten stlpec ktory testujeme
        [train_column, train_set] = takeColumn(training, selected_column);
        [test_column, test_set] = takeColumn(testing, selected_column);

        % zredukuje pocet dimenzii
        if(pocet_dimenzii < (d_stlpce-1))
            if(redukcia == 0)
                train_set = compute_mapping(train_set, 'PCA', pocet_dimenzii);
                test_set = compute_mapping(test_set, 'PCA', pocet_dimenzii);
            elseif(redukcia == 1)
                train_set = compute_mapping(train_set, 'FA', pocet_dimenzii);
                test_set = compute_mapping(test_set, 'FA', pocet_dimenzii);
            elseif(redukcia == 2)
                 train_set = fastica(train_set', 'numOfIC', pocet_dimenzii, 'stabilization', 'on')';
                 test_set = fastica(test_set', 'numOfIC', pocet_dimenzii, 'stabilization', 'on')';
            elseif(redukcia == 3)
                 train_set = myICA(train_set',pocet_dimenzii,false)';
                 test_set = myICA(test_set',pocet_dimenzii,false)';
            end;
        end;
        
        % samotny NN algoritmus
        % ---------------------
        % --------START--------
        % ---------------------

        learn = train_set;
        %learnT = train_column;
        test = train_set;
        %testT = test_column;
        
        % zisti kolko je unikatnych prvkov
        unikaty = unique(train_column);
        [pocet_unikatnych_prvkov, fuuuu] = size(unikaty);
        if(pocet_unikatnych_prvkov < 2)
            display('Musis mat ASPON 2 prvky vo vybranej columne');
            return;
        end;
        tmp_result = zeros(pocet_unikatnych_prvkov, 1);
        for i= 1: pocet_unikatnych_prvkov
            learnT = train_column;
            testT = test_column;
        
            idx_train = (learnT(:,1)==unikaty(i));
            idx_test = (testT(:,1)==unikaty(i));
            
            % vyfiltrujem vsetky hodnoty, aby ostali len 2
            learnT(~idx_train, 1) = 0;
            learnT(idx_train, 1) = 1;
            testT(~idx_test, 1) = 0;
            testT(idx_test, 1) = 1;

            w = LinearClassifier(learn, learnT, 2000, false);
            dots = (w * test.')';
            dots = (dots > 0);
            [m, xxx] = size(test);

            outs = [];
            for j = 1:m
                outs = [outs (dots(j) == testT(j))];
            end
            tmp_result(i) = 100 - (sum(outs)/m) * 100;
            [confusion, order] = confusionmat(double(dots), testT);
        end;
        result(validacia) = mean(tmp_result);
        % ---------------------------
        % -----------END-------------
        % ---------------------------
    end;
    % vloz hodnoty do nasho pola, ktore potom vykreslime
    % malo by byt v percentach
    ROCs(pocet_dimenzii) = mean(result);
end;

x = 1:(d_stlpce-1);
y = ROCs;

figure;
plot(x,y);
xlim([1 (d_stlpce-1)]);
ylim([0 100]);        